{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/Blahblah/blabla/src/lib/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\ndeclare global {\n  // eslint-disable-next-line no-var\n  var prismaGlobal: PrismaClient | undefined;\n}\n\nexport const prisma: PrismaClient = global.prismaGlobal || new PrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") {\n  global.prismaGlobal = prisma;\n}\n\n\n"],"names":[],"mappings":";;;;AAAA;;AAOO,MAAM,SAAuB,OAAO,YAAY,IAAI,IAAI,6IAAY;AAE3E,wCAA2C;IACzC,OAAO,YAAY,GAAG;AACxB","debugId":null}},
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/Blahblah/blabla/src/lib/authOptions.ts"],"sourcesContent":["import type { NextAuthOptions } from \"next-auth\";\nimport Credentials from \"next-auth/providers/credentials\";\nimport { prisma } from \"@/lib/db\";\nimport { compare } from \"bcryptjs\";\n\nexport const authOptions: NextAuthOptions = {\n  session: { strategy: \"jwt\" },\n  providers: [\n    Credentials({\n      name: \"Credentials\",\n      credentials: {\n        username: { label: \"Username\", type: \"text\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize(credentials) {\n        if (!credentials?.username || !credentials?.password) return null;\n        const user = await prisma.user.findUnique({ where: { username: credentials.username } });\n        if (!user?.passwordHash) return null;\n        const ok = await compare(credentials.password, user.passwordHash);\n        if (!ok) return null;\n        return { id: user.id, name: user.name, email: user.email, image: user.image };\n      },\n    }),\n  ],\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.id = user.id;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      if (token && session.user) {\n        (session.user as any).id = token.id;\n      }\n      return session;\n    },\n  },\n  pages: {\n    signIn: \"/(auth)/login\",\n  },\n};\n\n\n"],"names":[],"mappings":";;;;AACA;AACA;AACA;;;;AAEO,MAAM,cAA+B;IAC1C,SAAS;QAAE,UAAU;IAAM;IAC3B,WAAW;QACT,IAAA,qKAAW,EAAC;YACV,MAAM;YACN,aAAa;gBACX,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAO;gBAC5C,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,YAAY,CAAC,aAAa,UAAU,OAAO;gBAC7D,MAAM,OAAO,MAAM,4HAAM,CAAC,IAAI,CAAC,UAAU,CAAC;oBAAE,OAAO;wBAAE,UAAU,YAAY,QAAQ;oBAAC;gBAAE;gBACtF,IAAI,CAAC,MAAM,cAAc,OAAO;gBAChC,MAAM,KAAK,MAAM,IAAA,8IAAO,EAAC,YAAY,QAAQ,EAAE,KAAK,YAAY;gBAChE,IAAI,CAAC,IAAI,OAAO;gBAChB,OAAO;oBAAE,IAAI,KAAK,EAAE;oBAAE,MAAM,KAAK,IAAI;oBAAE,OAAO,KAAK,KAAK;oBAAE,OAAO,KAAK,KAAK;gBAAC;YAC9E;QACF;KACD;IACD,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;YACpB;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,SAAS,QAAQ,IAAI,EAAE;gBACxB,QAAQ,IAAI,CAAS,EAAE,GAAG,MAAM,EAAE;YACrC;YACA,OAAO;QACT;IACF;IACA,OAAO;QACL,QAAQ;IACV;AACF","debugId":null}},
    {"offset": {"line": 203, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/Blahblah/blabla/src/lib/session.ts"],"sourcesContent":["import { getServerSession } from \"next-auth\";\nimport { authOptions } from \"@/lib/authOptions\";\n\nexport async function requireUserId(): Promise<string> {\n  const session = await getServerSession(authOptions);\n  const id = (session?.user as any)?.id as string | undefined;\n  if (!id) throw new Error(\"unauthorized\");\n  return id;\n}\n\n\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe;IACpB,MAAM,UAAU,MAAM,IAAA,2JAAgB,EAAC,0IAAW;IAClD,MAAM,KAAM,SAAS,MAAc;IACnC,IAAI,CAAC,IAAI,MAAM,IAAI,MAAM;IACzB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 221, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/Blahblah/blabla/src/app/api/users/%5Bid%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { prisma } from \"@/lib/db\";\nimport { requireUserId } from \"@/lib/session\";\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  const { id } = await params;\n  \n  try {\n    const user = await prisma.user.findUnique({\n      where: { id },\n      select: {\n        id: true,\n        name: true,\n        username: true,\n        bio: true,\n        location: true,\n        website: true,\n        verified: true,\n        image: true,\n        coverImage: true,\n        createdAt: true,\n        _count: {\n          select: {\n            posts: true,\n            following: true,\n            followers: true,\n          }\n        }\n      }\n    });\n\n    if (!user) {\n      return NextResponse.json({ error: \"User not found\" }, { status: 404 });\n    }\n\n    return NextResponse.json(user);\n  } catch (error) {\n    console.error(\"Failed to fetch user:\", error);\n    return NextResponse.json({ error: \"Failed to fetch user\" }, { status: 500 });\n  }\n}\n\nexport async function PATCH(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  const userId = await requireUserId(request);\n  const { id } = await params;\n\n  // Users can only edit their own profile\n  if (userId !== id) {\n    return NextResponse.json({ error: \"Unauthorized\" }, { status: 403 });\n  }\n\n  try {\n    const body = await request.json();\n    const { name, bio, location, website } = body;\n\n    const user = await prisma.user.update({\n      where: { id },\n      data: {\n        name,\n        bio,\n        location,\n        website,\n      },\n      select: {\n        id: true,\n        name: true,\n        username: true,\n        bio: true,\n        location: true,\n        website: true,\n      }\n    });\n\n    return NextResponse.json(user);\n  } catch (error) {\n    console.error(\"Failed to update user:\", error);\n    return NextResponse.json({ error: \"Failed to update user\" }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA;;;;AAEO,eAAe,IACpB,OAAoB,EACpB,EAAE,MAAM,EAAuC;IAE/C,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM;IAErB,IAAI;QACF,MAAM,OAAO,MAAM,4HAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YACxC,OAAO;gBAAE;YAAG;YACZ,QAAQ;gBACN,IAAI;gBACJ,MAAM;gBACN,UAAU;gBACV,KAAK;gBACL,UAAU;gBACV,SAAS;gBACT,UAAU;gBACV,OAAO;gBACP,YAAY;gBACZ,WAAW;gBACX,QAAQ;oBACN,QAAQ;wBACN,OAAO;wBACP,WAAW;wBACX,WAAW;oBACb;gBACF;YACF;QACF;QAEA,IAAI,CAAC,MAAM;YACT,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QACtE;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAuB,GAAG;YAAE,QAAQ;QAAI;IAC5E;AACF;AAEO,eAAe,MACpB,OAAoB,EACpB,EAAE,MAAM,EAAuC;IAE/C,MAAM,SAAS,MAAM,IAAA,wIAAa,EAAC;IACnC,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM;IAErB,wCAAwC;IACxC,IAAI,WAAW,IAAI;QACjB,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IACpE;IAEA,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG;QAEzC,MAAM,OAAO,MAAM,4HAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACpC,OAAO;gBAAE;YAAG;YACZ,MAAM;gBACJ;gBACA;gBACA;gBACA;YACF;YACA,QAAQ;gBACN,IAAI;gBACJ,MAAM;gBACN,UAAU;gBACV,KAAK;gBACL,UAAU;gBACV,SAAS;YACX;QACF;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF","debugId":null}}]
}