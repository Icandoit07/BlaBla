{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/Blahblah/blabla/src/lib/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\ndeclare global {\n  // eslint-disable-next-line no-var\n  var prismaGlobal: PrismaClient | undefined;\n}\n\nexport const prisma: PrismaClient = global.prismaGlobal || new PrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") {\n  global.prismaGlobal = prisma;\n}\n\n\n"],"names":[],"mappings":";;;;AAAA;;AAOO,MAAM,SAAuB,OAAO,YAAY,IAAI,IAAI,6IAAY;AAE3E,wCAA2C;IACzC,OAAO,YAAY,GAAG;AACxB","debugId":null}},
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/Blahblah/blabla/src/lib/authOptions.ts"],"sourcesContent":["import type { NextAuthOptions } from \"next-auth\";\nimport Credentials from \"next-auth/providers/credentials\";\nimport { prisma } from \"@/lib/db\";\nimport { compare } from \"bcryptjs\";\n\nexport const authOptions: NextAuthOptions = {\n  session: { strategy: \"jwt\" },\n  providers: [\n    Credentials({\n      name: \"Credentials\",\n      credentials: {\n        username: { label: \"Username\", type: \"text\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize(credentials) {\n        if (!credentials?.username || !credentials?.password) return null;\n        const user = await prisma.user.findUnique({ where: { username: credentials.username } });\n        if (!user?.passwordHash) return null;\n        const ok = await compare(credentials.password, user.passwordHash);\n        if (!ok) return null;\n        return { id: user.id, name: user.name, email: user.email, image: user.image };\n      },\n    }),\n  ],\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.id = user.id;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      if (token && session.user) {\n        (session.user as any).id = token.id;\n      }\n      return session;\n    },\n  },\n  pages: {\n    signIn: \"/(auth)/login\",\n  },\n};\n\n\n"],"names":[],"mappings":";;;;AACA;AACA;AACA;;;;AAEO,MAAM,cAA+B;IAC1C,SAAS;QAAE,UAAU;IAAM;IAC3B,WAAW;QACT,IAAA,qKAAW,EAAC;YACV,MAAM;YACN,aAAa;gBACX,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAO;gBAC5C,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,YAAY,CAAC,aAAa,UAAU,OAAO;gBAC7D,MAAM,OAAO,MAAM,4HAAM,CAAC,IAAI,CAAC,UAAU,CAAC;oBAAE,OAAO;wBAAE,UAAU,YAAY,QAAQ;oBAAC;gBAAE;gBACtF,IAAI,CAAC,MAAM,cAAc,OAAO;gBAChC,MAAM,KAAK,MAAM,IAAA,8IAAO,EAAC,YAAY,QAAQ,EAAE,KAAK,YAAY;gBAChE,IAAI,CAAC,IAAI,OAAO;gBAChB,OAAO;oBAAE,IAAI,KAAK,EAAE;oBAAE,MAAM,KAAK,IAAI;oBAAE,OAAO,KAAK,KAAK;oBAAE,OAAO,KAAK,KAAK;gBAAC;YAC9E;QACF;KACD;IACD,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;YACpB;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,SAAS,QAAQ,IAAI,EAAE;gBACxB,QAAQ,IAAI,CAAS,EAAE,GAAG,MAAM,EAAE;YACrC;YACA,OAAO;QACT;IACF;IACA,OAAO;QACL,QAAQ;IACV;AACF","debugId":null}},
    {"offset": {"line": 203, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/Blahblah/blabla/src/lib/session.ts"],"sourcesContent":["import { getServerSession } from \"next-auth\";\nimport { authOptions } from \"@/lib/authOptions\";\n\nexport async function requireUserId(): Promise<string> {\n  const session = await getServerSession(authOptions);\n  const id = (session?.user as any)?.id as string | undefined;\n  if (!id) throw new Error(\"unauthorized\");\n  return id;\n}\n\n\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe;IACpB,MAAM,UAAU,MAAM,IAAA,2JAAgB,EAAC,0IAAW;IAClD,MAAM,KAAM,SAAS,MAAc;IACnC,IAAI,CAAC,IAAI,MAAM,IAAI,MAAM;IACzB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 221, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/Blahblah/blabla/src/app/api/posts/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { prisma } from \"@/lib/db\";\nimport { z } from \"zod\";\nimport { requireUserId } from \"@/lib/session\";\n\nconst createSchema = z.object({ content: z.string().min(1).max(280), replyToId: z.string().optional(), quotePostId: z.string().optional() });\n\nexport async function GET(request: Request) {\n  const { searchParams } = new URL(request.url);\n  const cursor = searchParams.get(\"cursor\") ?? undefined;\n  const take = Math.min(Number(searchParams.get(\"take\") ?? 20), 50);\n  const posts = await prisma.post.findMany({\n    take: take + 1,\n    ...(cursor ? { cursor: { id: cursor }, skip: 1 } : {}),\n    orderBy: { createdAt: \"desc\" },\n    include: { author: true, _count: { select: { likes: true, comments: true } } },\n  });\n  const nextCursor = posts.length > take ? posts.pop()!.id : undefined;\n  return NextResponse.json({ items: posts, nextCursor });\n}\n\nexport async function POST(request: Request) {\n  const body = await request.json();\n  const parsed = createSchema.safeParse(body);\n  if (!parsed.success) return NextResponse.json({ error: parsed.error.flatten() }, { status: 400 });\n  let userId: string;\n  try {\n    userId = await requireUserId();\n  } catch {\n    return NextResponse.json({ error: \"unauthorized\" }, { status: 401 });\n  }\n  const { content, replyToId, quotePostId } = parsed.data;\n  const post = await prisma.post.create({ data: { authorId: userId, content, replyToId, quotePostId } });\n  const tags = Array.from(new Set(content.match(/#[\\p{Letter}\\p{Number}_]+/gu)?.map(t => t.slice(1).toLowerCase()) ?? []));\n  if (tags.length) {\n    for (const tag of tags) {\n      const ht = await prisma.hashtag.upsert({ where: { tag }, update: {}, create: { tag } });\n      await prisma.postHashtag.upsert({ where: { postId_hashtagId: { postId: post.id, hashtagId: ht.id } }, update: {}, create: { postId: post.id, hashtagId: ht.id } });\n    }\n  }\n  return NextResponse.json(post);\n}\n\n\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA;AACA;;;;;AAEA,MAAM,eAAe,oLAAC,CAAC,MAAM,CAAC;IAAE,SAAS,oLAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;IAAM,WAAW,oLAAC,CAAC,MAAM,GAAG,QAAQ;IAAI,aAAa,oLAAC,CAAC,MAAM,GAAG,QAAQ;AAAG;AAEnI,eAAe,IAAI,OAAgB;IACxC,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;IAC5C,MAAM,SAAS,aAAa,GAAG,CAAC,aAAa;IAC7C,MAAM,OAAO,KAAK,GAAG,CAAC,OAAO,aAAa,GAAG,CAAC,WAAW,KAAK;IAC9D,MAAM,QAAQ,MAAM,4HAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;QACvC,MAAM,OAAO;QACb,GAAI,SAAS;YAAE,QAAQ;gBAAE,IAAI;YAAO;YAAG,MAAM;QAAE,IAAI,CAAC,CAAC;QACrD,SAAS;YAAE,WAAW;QAAO;QAC7B,SAAS;YAAE,QAAQ;YAAM,QAAQ;gBAAE,QAAQ;oBAAE,OAAO;oBAAM,UAAU;gBAAK;YAAE;QAAE;IAC/E;IACA,MAAM,aAAa,MAAM,MAAM,GAAG,OAAO,MAAM,GAAG,GAAI,EAAE,GAAG;IAC3D,OAAO,gJAAY,CAAC,IAAI,CAAC;QAAE,OAAO;QAAO;IAAW;AACtD;AAEO,eAAe,KAAK,OAAgB;IACzC,MAAM,OAAO,MAAM,QAAQ,IAAI;IAC/B,MAAM,SAAS,aAAa,SAAS,CAAC;IACtC,IAAI,CAAC,OAAO,OAAO,EAAE,OAAO,gJAAY,CAAC,IAAI,CAAC;QAAE,OAAO,OAAO,KAAK,CAAC,OAAO;IAAG,GAAG;QAAE,QAAQ;IAAI;IAC/F,IAAI;IACJ,IAAI;QACF,SAAS,MAAM,IAAA,wIAAa;IAC9B,EAAE,OAAM;QACN,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IACpE;IACA,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,WAAW,EAAE,GAAG,OAAO,IAAI;IACvD,MAAM,OAAO,MAAM,4HAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QAAE,MAAM;YAAE,UAAU;YAAQ;YAAS;YAAW;QAAY;IAAE;IACpG,MAAM,OAAO,MAAM,IAAI,CAAC,IAAI,IAAI,QAAQ,KAAK,CAAC,gCAAgC,IAAI,CAAA,IAAK,EAAE,KAAK,CAAC,GAAG,WAAW,OAAO,EAAE;IACtH,IAAI,KAAK,MAAM,EAAE;QACf,KAAK,MAAM,OAAO,KAAM;YACtB,MAAM,KAAK,MAAM,4HAAM,CAAC,OAAO,CAAC,MAAM,CAAC;gBAAE,OAAO;oBAAE;gBAAI;gBAAG,QAAQ,CAAC;gBAAG,QAAQ;oBAAE;gBAAI;YAAE;YACrF,MAAM,4HAAM,CAAC,WAAW,CAAC,MAAM,CAAC;gBAAE,OAAO;oBAAE,kBAAkB;wBAAE,QAAQ,KAAK,EAAE;wBAAE,WAAW,GAAG,EAAE;oBAAC;gBAAE;gBAAG,QAAQ,CAAC;gBAAG,QAAQ;oBAAE,QAAQ,KAAK,EAAE;oBAAE,WAAW,GAAG,EAAE;gBAAC;YAAE;QAClK;IACF;IACA,OAAO,gJAAY,CAAC,IAAI,CAAC;AAC3B","debugId":null}}]
}