{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/Blahblah/blabla/src/lib/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\ndeclare global {\n  // eslint-disable-next-line no-var\n  var prismaGlobal: PrismaClient | undefined;\n}\n\nexport const prisma: PrismaClient = global.prismaGlobal || new PrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") {\n  global.prismaGlobal = prisma;\n}\n\n\n"],"names":[],"mappings":";;;;AAAA;;AAOO,MAAM,SAAuB,OAAO,YAAY,IAAI,IAAI,6IAAY;AAE3E,wCAA2C;IACzC,OAAO,YAAY,GAAG;AACxB","debugId":null}},
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/Blahblah/blabla/src/lib/authOptions.ts"],"sourcesContent":["import type { NextAuthOptions } from \"next-auth\";\nimport Credentials from \"next-auth/providers/credentials\";\nimport { prisma } from \"@/lib/db\";\nimport { compare } from \"bcryptjs\";\n\nexport const authOptions: NextAuthOptions = {\n  session: { strategy: \"jwt\" },\n  providers: [\n    Credentials({\n      name: \"Credentials\",\n      credentials: {\n        username: { label: \"Username\", type: \"text\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize(credentials) {\n        if (!credentials?.username || !credentials?.password) return null;\n        const user = await prisma.user.findUnique({ where: { username: credentials.username } });\n        if (!user?.passwordHash) return null;\n        const ok = await compare(credentials.password, user.passwordHash);\n        if (!ok) return null;\n        return { id: user.id, name: user.name, email: user.email, image: user.image };\n      },\n    }),\n  ],\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.id = user.id;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      if (token && session.user) {\n        (session.user as any).id = token.id;\n      }\n      return session;\n    },\n  },\n  pages: {\n    signIn: \"/(auth)/login\",\n  },\n};\n\n\n"],"names":[],"mappings":";;;;AACA;AACA;AACA;;;;AAEO,MAAM,cAA+B;IAC1C,SAAS;QAAE,UAAU;IAAM;IAC3B,WAAW;QACT,IAAA,qKAAW,EAAC;YACV,MAAM;YACN,aAAa;gBACX,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAO;gBAC5C,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,YAAY,CAAC,aAAa,UAAU,OAAO;gBAC7D,MAAM,OAAO,MAAM,4HAAM,CAAC,IAAI,CAAC,UAAU,CAAC;oBAAE,OAAO;wBAAE,UAAU,YAAY,QAAQ;oBAAC;gBAAE;gBACtF,IAAI,CAAC,MAAM,cAAc,OAAO;gBAChC,MAAM,KAAK,MAAM,IAAA,8IAAO,EAAC,YAAY,QAAQ,EAAE,KAAK,YAAY;gBAChE,IAAI,CAAC,IAAI,OAAO;gBAChB,OAAO;oBAAE,IAAI,KAAK,EAAE;oBAAE,MAAM,KAAK,IAAI;oBAAE,OAAO,KAAK,KAAK;oBAAE,OAAO,KAAK,KAAK;gBAAC;YAC9E;QACF;KACD;IACD,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;YACpB;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,SAAS,QAAQ,IAAI,EAAE;gBACxB,QAAQ,IAAI,CAAS,EAAE,GAAG,MAAM,EAAE;YACrC;YACA,OAAO;QACT;IACF;IACA,OAAO;QACL,QAAQ;IACV;AACF","debugId":null}},
    {"offset": {"line": 203, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/Blahblah/blabla/src/app/api/users/suggestions/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { prisma } from \"@/lib/db\";\nimport { getServerSession } from \"next-auth\";\nimport { authOptions } from \"@/lib/authOptions\";\n\nexport async function GET(request: NextRequest) {\n  const session = await getServerSession(authOptions);\n  \n  try {\n    // Get users that the current user is NOT following\n    const users = await prisma.user.findMany({\n      where: {\n        AND: [\n          { id: { not: session?.user?.id || \"\" } }, // Not the current user\n          { onboardingComplete: true }, // Only show completed profiles\n          session?.user?.id ? {\n            followers: {\n              none: {\n                followerId: session.user.id\n              }\n            }\n          } : {}\n        ]\n      },\n      select: {\n        id: true,\n        name: true,\n        username: true,\n        verified: true,\n        bio: true,\n        _count: {\n          select: {\n            followers: true,\n          }\n        }\n      },\n      orderBy: {\n        followers: {\n          _count: 'desc'\n        }\n      },\n      take: 5,\n    });\n\n    return NextResponse.json(users);\n  } catch (error) {\n    console.error(\"Failed to fetch user suggestions:\", error);\n    return NextResponse.json({ error: \"Failed to fetch suggestions\" }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;AAEO,eAAe,IAAI,OAAoB;IAC5C,MAAM,UAAU,MAAM,IAAA,2JAAgB,EAAC,0IAAW;IAElD,IAAI;QACF,mDAAmD;QACnD,MAAM,QAAQ,MAAM,4HAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;YACvC,OAAO;gBACL,KAAK;oBACH;wBAAE,IAAI;4BAAE,KAAK,SAAS,MAAM,MAAM;wBAAG;oBAAE;oBACvC;wBAAE,oBAAoB;oBAAK;oBAC3B,SAAS,MAAM,KAAK;wBAClB,WAAW;4BACT,MAAM;gCACJ,YAAY,QAAQ,IAAI,CAAC,EAAE;4BAC7B;wBACF;oBACF,IAAI,CAAC;iBACN;YACH;YACA,QAAQ;gBACN,IAAI;gBACJ,MAAM;gBACN,UAAU;gBACV,UAAU;gBACV,KAAK;gBACL,QAAQ;oBACN,QAAQ;wBACN,WAAW;oBACb;gBACF;YACF;YACA,SAAS;gBACP,WAAW;oBACT,QAAQ;gBACV;YACF;YACA,MAAM;QACR;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qCAAqC;QACnD,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA8B,GAAG;YAAE,QAAQ;QAAI;IACnF;AACF","debugId":null}}]
}