{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport type { NextRequest } from \"next/server\";\nimport { getToken } from \"next-auth/jwt\";\n\nexport async function middleware(request: NextRequest) {\n  const token = await getToken({ \n    req: request,\n    secret: process.env.NEXTAUTH_SECRET \n  });\n\n  const { pathname } = request.nextUrl;\n\n  // Protected routes that require authentication\n  const protectedRoutes = [\"/compose\", \"/notifications\", \"/bookmarks\"];\n  const isProtectedRoute = protectedRoutes.some(route => pathname.startsWith(route));\n\n  if (isProtectedRoute && !token) {\n    const url = new URL(\"/login\", request.url);\n    url.searchParams.set(\"callbackUrl\", pathname);\n    return NextResponse.redirect(url);\n  }\n\n  return NextResponse.next();\n}\n\nexport const config = {\n  matcher: [\n    \"/compose/:path*\",\n    \"/notifications/:path*\",\n    \"/bookmarks/:path*\",\n  ],\n};\n\n\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAEA;;;AAEO,eAAe,WAAW,OAAoB;IACnD,MAAM,QAAQ,MAAM,IAAA,gKAAQ,EAAC;QAC3B,KAAK;QACL,QAAQ,QAAQ,GAAG,CAAC,eAAe;IACrC;IAEA,MAAM,EAAE,QAAQ,EAAE,GAAG,QAAQ,OAAO;IAEpC,+CAA+C;IAC/C,MAAM,kBAAkB;QAAC;QAAY;QAAkB;KAAa;IACpE,MAAM,mBAAmB,gBAAgB,IAAI,CAAC,CAAA,QAAS,SAAS,UAAU,CAAC;IAE3E,IAAI,oBAAoB,CAAC,OAAO;QAC9B,MAAM,MAAM,IAAI,IAAI,UAAU,QAAQ,GAAG;QACzC,IAAI,YAAY,CAAC,GAAG,CAAC,eAAe;QACpC,OAAO,gMAAY,CAAC,QAAQ,CAAC;IAC/B;IAEA,OAAO,gMAAY,CAAC,IAAI;AAC1B;AAEO,MAAM,SAAS;IACpB,SAAS;QACP;QACA;QACA;KACD;AACH"}}]
}