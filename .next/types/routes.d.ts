// This file is generated automatically by Next.js
// Do not edit this file manually

type AppRoutes = "/" | "/bookmarks" | "/compose" | "/feed" | "/forgot-password" | "/login" | "/notifications" | "/onboarding" | "/post/[id]" | "/register" | "/search" | "/settings/profile" | "/trending" | "/u/[username]"
type AppRouteHandlerRoutes = "/api/auth/[...nextauth]" | "/api/auth/check-username" | "/api/auth/complete-onboarding" | "/api/auth/forgot-password/reset" | "/api/auth/forgot-password/send-otp" | "/api/auth/forgot-password/verify-otp" | "/api/auth/register/complete" | "/api/auth/register/send-otp" | "/api/auth/register/verify-otp" | "/api/auth/send-otp" | "/api/auth/verify-otp" | "/api/health" | "/api/media/presigned-url" | "/api/media/upload" | "/api/notifications" | "/api/polls" | "/api/polls/[id]/vote" | "/api/posts" | "/api/posts/[id]/bookmark" | "/api/posts/[id]/comments" | "/api/posts/[id]/like" | "/api/posts/[id]/quote" | "/api/posts/[id]/repost" | "/api/register" | "/api/search" | "/api/trending" | "/api/users/[id]" | "/api/users/[id]/follow" | "/api/users/suggestions"
type PageRoutes = never
type LayoutRoutes = "/"
type RedirectRoutes = never
type RewriteRoutes = never
type Routes = AppRoutes | PageRoutes | LayoutRoutes | RedirectRoutes | RewriteRoutes | AppRouteHandlerRoutes


interface ParamMap {
  "/": {}
  "/api/auth/[...nextauth]": { "nextauth": string[]; }
  "/api/auth/check-username": {}
  "/api/auth/complete-onboarding": {}
  "/api/auth/forgot-password/reset": {}
  "/api/auth/forgot-password/send-otp": {}
  "/api/auth/forgot-password/verify-otp": {}
  "/api/auth/register/complete": {}
  "/api/auth/register/send-otp": {}
  "/api/auth/register/verify-otp": {}
  "/api/auth/send-otp": {}
  "/api/auth/verify-otp": {}
  "/api/health": {}
  "/api/media/presigned-url": {}
  "/api/media/upload": {}
  "/api/notifications": {}
  "/api/polls": {}
  "/api/polls/[id]/vote": { "id": string; }
  "/api/posts": {}
  "/api/posts/[id]/bookmark": { "id": string; }
  "/api/posts/[id]/comments": { "id": string; }
  "/api/posts/[id]/like": { "id": string; }
  "/api/posts/[id]/quote": { "id": string; }
  "/api/posts/[id]/repost": { "id": string; }
  "/api/register": {}
  "/api/search": {}
  "/api/trending": {}
  "/api/users/[id]": { "id": string; }
  "/api/users/[id]/follow": { "id": string; }
  "/api/users/suggestions": {}
  "/bookmarks": {}
  "/compose": {}
  "/feed": {}
  "/forgot-password": {}
  "/login": {}
  "/notifications": {}
  "/onboarding": {}
  "/post/[id]": { "id": string; }
  "/register": {}
  "/search": {}
  "/settings/profile": {}
  "/trending": {}
  "/u/[username]": { "username": string; }
}


export type ParamsOf<Route extends Routes> = ParamMap[Route]

interface LayoutSlotMap {
  "/": never
}


export type { AppRoutes, PageRoutes, LayoutRoutes, RedirectRoutes, RewriteRoutes, ParamMap, AppRouteHandlerRoutes }

declare global {
  /**
   * Props for Next.js App Router page components
   * @example
   * ```tsx
   * export default function Page(props: PageProps<'/blog/[slug]'>) {
   *   const { slug } = await props.params
   *   return <div>Blog post: {slug}</div>
   * }
   * ```
   */
  interface PageProps<AppRoute extends AppRoutes> {
    params: Promise<ParamMap[AppRoute]>
    searchParams: Promise<Record<string, string | string[] | undefined>>
  }

  /**
   * Props for Next.js App Router layout components
   * @example
   * ```tsx
   * export default function Layout(props: LayoutProps<'/dashboard'>) {
   *   return <div>{props.children}</div>
   * }
   * ```
   */
  type LayoutProps<LayoutRoute extends LayoutRoutes> = {
    params: Promise<ParamMap[LayoutRoute]>
    children: React.ReactNode
  } & {
    [K in LayoutSlotMap[LayoutRoute]]: React.ReactNode
  }

  /**
   * Context for Next.js App Router route handlers
   * @example
   * ```tsx
   * export async function GET(request: NextRequest, context: RouteContext<'/api/users/[id]'>) {
   *   const { id } = await context.params
   *   return Response.json({ id })
   * }
   * ```
   */
  interface RouteContext<AppRouteHandlerRoute extends AppRouteHandlerRoutes> {
    params: Promise<ParamMap[AppRouteHandlerRoute]>
  }
}
